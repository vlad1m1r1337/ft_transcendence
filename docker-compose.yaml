name: ft_transcendence

services:
#---------------------------------- Webserver ----------------------------------#
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '8081:443'
      - '8080:80'
        #volumes:
        #- './nginx/tools:/etc/nginx/ssl/'
        #- './nginx/conf/nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - front
      - back
    networks:
      - back-tier
      - front-tier
    restart: always

#---------------------------------- Frontend ----------------------------------#
  front:
    container_name: front
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
        #volumes:
        #- './front:/app'
    networks:
      - back-tier
      - front-tier
    depends_on:
      - postgres

#---------------------------------- Database ----------------------------------#
  postgres:
    image: postgres:16
      #image: 'bitnami/postgresql:latest'
    container_name: postgres
    environment:
      - 'POSTGRES_PASSWORD=admin123'
      - 'POSTGRES_USER=admin'
      - 'POSTGRES_DB=test_db'
#    volumes:
#      - ./data/postgresql:/bitnami/postgresql
    networks:
      - back-tier
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

#---------------------------------- Backend ----------------------------------#
  back:
    container_name: back
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - '5001:5001'
    volumes:   # need to be removed after finish backend part
      - './back:/usr/src/app/'
    networks:
      - back-tier
    depends_on:
      postgres:
        condition: service_healthy



#---------------------------------- Monitoring ----------------------------------#
  prometheus:
    container_name: prom
    build:
      context: './monitoring/prometheus'
      dockerfile: Dockerfile
    ports:
      - '9090:9090'
    volumes:
      - './data/prometheus:/prometheus'
    command:
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - back-tier
      - monitoring-tier

  grafana:
    container_name: grafana
    build:
      context: './monitoring/grafana'
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - 'GF_SECURITY_ADMIN_USER=admin'
      - 'GF_SECURITY_ADMIN_PASSWORD=admin123'
    networks:
      - front-tier
      - monitoring-tier

  nginx-exporter:
    container_name: nginx-exporter
    image: nginx/nginx-prometheus-exporter
    command: 
      - '--nginx.scrape-uri=http://localhost:8080/nginx_status'
    ports:
      - '9113:9113'
    networks:
      - back-tier
      - monitoring-tier

  node-exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    ports:
      - '9100:9100'
    command:
      - '--path.rootfs=/host'
    volumes:
#      - '/:/host:ro,rslave'
      - '/sys:/host/sys:ro'
      - '/proc:/host/proc:ro'
    networks:
      - monitoring-tier

  alertmanager:
    container_name: alerting
    build:
      context: './monitoring/alertmanager'
      dockerfile: Dockerfile
    ports:
      - '9093:9093'
    networks:
      - monitoring-tier

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
  monitoring-tier:
    driver: bridge
