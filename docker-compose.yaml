name: ft_transcendence

services:
  #---------------------------------- Webserver ----------------------------------#
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '8081:443'
      - '8080:80'
    depends_on:
      - front
      - back
    networks:
      - back-tier
      - front-tier
    restart: always

  #---------------------------------- Frontend ----------------------------------#
  front:
    container_name: front
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    volumes:
      - './front:/app'
    networks:
      - back-tier
      - front-tier
    depends_on:
      - postgres

  #---------------------------------- Database ----------------------------------#
  postgres:
    container_name: postgres
    build:
      context: ./postgresql
      dockerfile: Dockerfile
    environment:
      - 'POSTGRES_PASSWORD=admin123'
      - 'POSTGRES_USER=admin'
      - 'POSTGRES_DB=test_db'
    networks:
      - back-tier
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  #---------------------------------- Backend ----------------------------------#
  back:
    container_name: back
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - '5001:5001'
    volumes:   # need to be removed after finish backend part
      - './back:/usr/src/app/'
    networks:
      - back-tier
    depends_on:
      postgres:
        condition: service_healthy



  #---------------------------------- Monitoring ----------------------------------#
  prometheus:
    container_name: prom
    build:
      context: './monitoring/prometheus'
      dockerfile: Dockerfile
    ports:
      - '9090:9090'
    volumes:
      - './data/prometheus:/prometheus'
    command:
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - back-tier
      - monitoring-tier

  grafana:
    container_name: grafana
    build:
      context: './monitoring/grafana'
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - 'GF_SECURITY_ADMIN_USER=${GF_USER}'
      - 'GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}'
    networks:
      - front-tier
      - monitoring-tier

  nginx-exporter:
    container_name: nginx-exporter
    image: nginx/nginx-prometheus-exporter
    command:
      - '--nginx.scrape-uri=http://localhost:8080/nginx_status'
    ports:
      - '9113:9113'
    networks:
      - back-tier
      - monitoring-tier

  node-exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    ports:
      - '9100:9100'
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/sys:/host/sys:ro'
      - '/proc:/host/proc:ro'
    networks:
      - monitoring-tier

  alertmanager:
    container_name: alerting
    build:
      context: './monitoring/alertmanager'
      dockerfile: Dockerfile
    ports:
      - '9093:9093'
    networks:
      - monitoring-tier



#---------------------------------- ELK stack ----------------------------------#
#  elasticsearch:
#    container_name: elastic
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
#    environment:
#      - 'discovery.type=single-node'
#      - 'xpack.security.enabled=true'
#      - 'xpack.security.authc.api_key.enabled=true'
#      - 'ELASTIC_PASSWORD=$ELASTIC_PASSWORD'
#    ports:
#      - '9200:9200'
#    networks:
#      - back-tier
#      - logging-tier
#    env_file: .env
#
#  logstash:
#    container_name: logstash
#    image: docker.elastic.co/logstash/logstash:7.17.10
#    command: 'logstash -f /usr/share/logstash/pipeline/logstash.conf --config.reload.automatic'
#    environment:
#      - 'xpack.monitoring.elasticsearch.url=http://elasticsearch:9200'
#    ports:
#      - '5044:5044'
#      - '9600:9600'
#      - '6000:6000'
#      - '12201:12201/udp'
#    volumes:
#      - "./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf"
#    networks:
#      - back-tier
#      - logging-tier
#    depends_on:
#      - elasticsearch
#
#  kibana:
#    container_name: kibana
#    image: docker.elastic.co/kibana/kibana:7.17.10
#    ports:
#      - '5601:5601'
#    environment:
#      - 'ELASTICSEARCH_HOSTS=http://elasticsearch:9200'
#      - 'SERVER_BASE_PATH=/kibana'
#      - 'ELASTICSEARCH_USERNAME=$ELASTIC_USER'
#      - 'ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD'
#    volumes:
#      - './tools/kibana.yml:/usr/share/kibana/config/kibana.yml'
#    networks:
#      - front-tier
#      - logging-tier
#    depends_on:
#      - elasticsearch
#    env_file: .env


networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
  monitoring-tier:
    driver: bridge
#  logging-tier:
#    driver: bridge
