name: ft_transcendence

services:
#---------------------------------- Webserver ----------------------------------#
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    ports:
      - '8081:443'
      - '8080:80'
    volumes:
      - './nginx/tools:/etc/nginx/ssl/'
      - './nginx/conf/nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - front
      - back
    networks:
      - back-tier
      - front-tier
    restart: on-failure:3

#---------------------------------- Frontend ----------------------------------#
  front:
    container_name: front
    build:
      context: ./front
    ports:
      - '5000:5000'
    volumes:
      - './front:/app'
    networks:
      - back-tier
      - front-tier
    depends_on:
      - postgres

#---------------------------------- Database ----------------------------------#
  postgres:
    image: postgres:16
      #image: 'bitnami/postgresql:latest'
    container_name: postgres
    environment:
      - 'POSTGRES_PASSWORD=admin123'
      - 'POSTGRES_USER=admin'
      - 'POSTGRES_DB=test_db'
#    volumes:
#      - ./data/postgresql:/bitnami/postgresql
    networks:
      - back-tier
    ports:
      - '5432:5432'
    logging:
      driver: gelf
      options:
        gelf-address: 'udp://localhost:12201'
    links:
      - logstash:logstash
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

#---------------------------------- Backend ----------------------------------#
  back:
    container_name: back
    build:
      context: ./back
    ports:
      - '5001:5001'
    volumes:
      - './back:/usr/src/app/'
    networks:
      - back-tier
    depends_on:
      postgres:
        condition: service_healthy



#---------------------------------- ELK stack ----------------------------------#
  elasticsearch:
    container_name: elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    environment:
      - 'discovery.type=single-node'
      - 'xpack.security.enabled: true'
      - 'xpack.security.authc.api_key.enabled: true'
    ports:
      - '9200:9200'
    networks:
      - back-tier
      - logging-tier

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.17.10
    command: 'logstash -f /usr/share/logstash/pipeline/logstash.conf --config.reload.automatic'
    environment:
      - 'xpack.monitoring.elasticsearch.url=http://elasticsearch:9200'
    ports:
      - '5044:5044'
      - '9600:9600'
      - '6000:6000'
      - '12201:12201/udp'
    volumes:
      - "./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf"
    networks:
      - back-tier
      - logging-tier
    depends_on:
      - elasticsearch

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.17.10
    ports:
      - '5601:5601'
    environment:
      - 'ELASTICSEARCH_HOSTS=http://elasticsearch:9200'
      - 'SERVER_BASE_PATH=/kibana'
    volumes:
      - './tools/kibana.yml:/usr/share/kibana/config/kibana.yml'
    networks:
      - front-tier
      - logging-tier
    depends_on:
      - elasticsearch



#---------------------------------- Monitoring ----------------------------------#
  prometheus:
    container_name: prom
    build:
      context: './monitoring/prometheus'
      dockerfile: Dockerfile
    ports:
      - '9090:9090'
    volumes:
      - './data/prometheus:/prometheus'
    command:
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - back-tier
      - monitoring-tier

  grafana:
    container_name: grafana
    build:
      context: './monitoring/grafana'
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - 'GF_SECURITY_ADMIN_USER=admin'
      - 'GF_SECURITY_ADMIN_PASSWORD=admin123'
    networks:
      - front-tier
      - monitoring-tier
      - logging-tier
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: 'grafana'
    links:
      - logstash:logstash

  nginx-exporter:
    container_name: nginx-exporter
    image: nginx/nginx-prometheus-exporter
    command: 
      - '--nginx.scrape-uri=http://localhost:8080/nginx_status'
    ports:
      - '9113:9113'
    networks:
      - back-tier
      - monitoring-tier

  node-exporter:
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    ports:
      - '9100:9100'
    command:
      - '--path.rootfs=/host'
    volumes:
#      - '/:/host:ro,rslave'
      - '/sys:/host/sys:ro'
      - '/proc:/host/proc:ro'
    networks:
      - monitoring-tier

  alertmanager:
    container_name: alerting
    build:
      context: './monitoring/alertmanager'
      dockerfile: Dockerfile
    ports:
      - '9093:9093'
    networks:
      - monitoring-tier

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
  logging-tier:
    driver: bridge
  monitoring-tier:
    driver: bridge
