name: ft_transcendence

services:
  #---------------------------------- MAIN PART ----------------------------------#
  #---------------------------------- Webserver ----------------------------------#
  nginx:
    container_name: nginx
    build:
      context: './nginx'
      dockerfile: Dockerfile
    ports:
      - '8081:443'
      - '8080:80'
    networks:
      - back-tier
      - front-tier
    restart: always
    depends_on:
      - front
      - back

  #---------------------------------- Frontend ----------------------------------#
  front:
    container_name: front
    build:
      context: './front'
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    networks:
      - back-tier
      - front-tier
    restart: always
    depends_on: {"postgres": {"condition": "service_healthy"}}

  #---------------------------------- Backend ----------------------------------#
  back:
    container_name: back
    build:
      context: './back'
      dockerfile: Dockerfile
    ports:
      - '5001:5001'
    networks:
      - back-tier
    restart: always
    depends_on: {"postgres": {"condition": "service_healthy"}}
    env_file:
      - .env

  #---------------------------------- Database ----------------------------------#
  postgres:
    container_name: postgres
    build:
      context: './postgresql'
      dockerfile: Dockerfile
    environment:
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_DB=${POSTGRES_DB}'
    ports:
      - '5432:5432'
    networks:
      - back-tier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: gelf
      options:
        gelf-address: 'udp://localhost:12201'
    links:
      - log01:log01
    restart: always


  #---------------------------------- DevOps PART ----------------------------------#
  #---------------------------------- Monitoring ----------------------------------#
  prometheus:
    container_name: prom
    build:
      context: './monitoring/prometheus'
      dockerfile: Dockerfile
    command:
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=3d'
    ports:
      - '9090:9090'
    networks:
      - back-tier
      - monitoring-tier
    volumes:
      - 'prometheus-volume:/prometheus'
    restart: always

  grafana:
    container_name: grafana
    build:
      context: './monitoring/grafana'
      dockerfile: Dockerfile
    environment:
      - 'GF_SECURITY_ADMIN_USER=${GF_USER}'
      - 'GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}'
    ports:
      - '3000:3000'
    networks:
      - front-tier
      - monitoring-tier
    restart: always

  nginx-exporter:
    container_name: nginx-exporter
    image: 'nginx/nginx-prometheus-exporter:1.4'
    command:
      - '--nginx.scrape-uri=http://localhost:8080/nginx_status'
    ports:
      - '9113:9113'
    networks:
      - back-tier
      - monitoring-tier
    restart: always

  node-exporter:
    container_name: node-exporter
    image: 'quay.io/prometheus/node-exporter:v1.8.2'
    command:
      - '--path.rootfs=/host'
    environment:
      - 'HOST_PROC=/host/proc'
      - 'HOST_SYS=/host/sys'
    ports:
      - '9100:9100'
    networks:
      - monitoring-tier
    cap_add:
      - SYS_ADMIN
    security_opt:
      - seccomp:unconfined
    restart: always

  alertmanager:
    container_name: alerting
    build:
      context: './monitoring/alertmanager'
      dockerfile: Dockerfile
    ports:
      - '9093:9093'
    networks:
      - monitoring-tier
    restart: always


  #---------------------------------- ELK stack ----------------------------------#
  es01:
    container_name: es01
    build:
      context: './elk/elasticsearch'
      dockerfile: Dockerfile
    privileged: true
    environment:
      - 'node.name=es01'
      - 'cluster.name=es-docker-cluster'
      - 'discovery.seed_hosts=es01'
      - 'cluster.initial_master_nodes=es01'
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - 'xpack.license.self_generated.type=trial'
      - 'xpack.security.enabled=true'
      - 'xpack.security.http.ssl.enabled=true'
      - 'xpack.security.http.ssl.key=/usr/share/elasticsearch/config/certificates/es01/es01.key'
      - 'xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/config/certificates/ca/ca.crt'
      - 'xpack.security.http.ssl.certificate=/usr/share/elasticsearch/config/certificates/es01/es01.crt'
      - 'xpack.security.transport.ssl.enabled=true'
      - 'xpack.security.transport.ssl.verification_mode=certificate'
      - 'xpack.security.transport.ssl.certificate_authorities=/usr/share/elasticsearch/config/certificates/ca/ca.crt'
      - 'xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certificates/es01/es01.crt'
      - 'xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certificates/es01/es01.key'
      - 'ELASTIC_PASSWORD=${ELASTIC_PASSWORD}'
    ports:
      - '9200:9200'
    networks:
      - elastic-tier
    healthcheck:
      test: curl --cacert /usr/share/elasticsearch/config/certificates/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 120
    restart: always

  kib01:
    container_name: kib01
    build:
      context: './elk/kibana'
      dockerfile: Dockerfile
    environment:
      SERVERNAME: localhost
      ELASTICSEARCH_URL: https://es01:9200
      ELASTICSEARCH_HOSTS: https://es01:9200
      ELASTICSEARCH_USERNAME: ${KIBANA_USER}
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: /usr/share/elasticsearch/config/certificates/ca/ca.crt
      SERVER_SSL_ENABLED: "true"
      SERVER_SSL_KEY: /usr/share/elasticsearch/config/certificates/kib01/kib01.key
      SERVER_SSL_CERTIFICATE: /usr/share/elasticsearch/config/certificates/kib01/kib01.crt
    ports:
      - '5601:5601'
    networks:
      - elastic-tier
    restart: always
    depends_on: {"es01": {"condition": "service_healthy"}}

  log01:
    container_name: log01
    build:
      context: './elk/logstash'
      dockerfile: Dockerfile
    environment:
      - 'ELASTIC_PASSWORD=${ELASTIC_PASSWORD}'
      - 'ELASTIC_USER=${ELASTIC_USER}'
    ports:
      - '5044:5044'
      - '6000:6000'
      - '12201:12201/udp'
    networks:
      - elastic-tier
      - back-tier
    restart: always
    depends_on: {"es01": {"condition": "service_healthy"}}


#---------------------------------- Project settings ----------------------------------#
networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
  monitoring-tier:
    driver: bridge
  elastic-tier:
    driver: bridge

volumes:
    prometheus-volume:
